import {
    EventResult as EventResultCommon,
    HTMLIdLiveFaceCaptureElementEvent,
    HTMLIdLiveCaptureElement,
    Action,
    Props,
    CaptureResult,
    OpenResult,
    ErrorResult,
    LicenseInfoResult,
    OpenEvent,
    CaptureEvent,
    ErrorEvent,
    LicenseInfoEvent,
} from './common';

/** @deprecated use DetectionResult */
export interface FaceDetectionResult {
    errors: FaceDetectionError[]
}

export type DetectionResult = FaceDetectionResult;

/** @deprecated use DetectionError */
export enum FaceDetectionError {
    FACE_NOT_FOUND = 'FACE_NOT_FOUND',
    TOO_MANY_FACES = 'TOO_MANY_FACES',
    FACE_TOO_SMALL = 'FACE_TOO_SMALL',
    FACE_ANGLE_TOO_LARGE = 'FACE_ANGLE_TOO_LARGE',
    FACE_TOO_CLOSE = 'FACE_TOO_CLOSE',
    FACE_CLOSE_TO_BORDER = 'FACE_CLOSE_TO_BORDER',
    FACE_CROPPED = 'FACE_CROPPED',
    FACE_OCCLUDED = 'FACE_OCCLUDED',
    EYES_CLOSED = 'EYES_CLOSED',
    DARK_IMAGE = 'DARK_IMAGE',
    FACE_BLURRY = 'FACE_BLURRY',
    MOUTH_OPEN = 'MOUTH_OPEN',
    SUNGLASSES_DETECTED = 'SUNGLASSES_DETECTED',
    LICENSE_NOT_INSTALLED = 'LICENSE_NOT_INSTALLED',
    FACE_NOT_CENTERED = 'FACE_NOT_CENTERED',
}

export type DetectionError = FaceDetectionError;

export interface EventResult extends EventResultCommon {
    /** @deprecated use detection */
    faceDetection: FaceDetectionResult;
    detection: DetectionResult;
}

/** @deprecated use DetectionEvent */
export type FaceDetectionEvent = HTMLIdLiveFaceCaptureElementEvent<FaceDetectionResult>;
export type DetectionEvent = HTMLIdLiveFaceCaptureElementEvent<DetectionResult>;

declare global {
    type HTMLIdLiveFaceCaptureElement = HTMLIdLiveCaptureElement<EventResult>

    interface HTMLElementTagNameMap {
        'idlive-face-capture': HTMLIdLiveFaceCaptureElement;
    }
}

export {
    Action,
    Props,
    CaptureResult,
    OpenResult,
    ErrorResult,
    LicenseInfoResult,
    OpenEvent,
    CaptureEvent,
    ErrorEvent,
    LicenseInfoEvent,
};
