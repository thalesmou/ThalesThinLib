class z {
    constructor() {
        this.createWorker = t => new Promise(((e, i) => (this.smartCaptureWorker || (this.smartCaptureWorker = this.createCrossDomainWorker(t)), this.makeRequest("Initialise", null).then(e).catch(i)))),
        this.checkImage = t => this.makeRequest("PerformQualityCheck", {
            image: t
        }),
        this.makeRequest = (t, e, i = (new Date).getTime().toString()) => new Promise(((a, r) => {
                if (this.smartCaptureWorker) {
                    const n = ({
                        data: t
                    }) => t.id === i ? (this.smartCaptureWorker.removeEventListener("message", n), this.smartCaptureWorker.removeEventListener("error", o), "Error" === t.message ? r() : a(t.data)) : r(),
                    o = t => (this.smartCaptureWorker.removeEventListener("message", n), this.smartCaptureWorker.removeEventListener("error", o), r(t));
                    this.smartCaptureWorker.addEventListener("message", n),
                    this.smartCaptureWorker.addEventListener("error", o),
                    this.smartCaptureWorker.postMessage({
                        id: i,
                        message: t,
                        data: e
                    })
                } else
                    r()
            }))
    }
    createCrossDomainWorker(t) {
        let e;
        try {
            this.testSameOrigin(t) ? (e = new Worker(t, {
                    type: "module"
                }), e.onerror = i => {
                    i.preventDefault(),
                    e = this.createWorkerFallback(t)
                }) : e = this.createWorkerFallback(t)
        } catch (i) {
            e = this.createWorkerFallback(t)
        }
        return e
    }
    createWorkerFallback(t) {
        try {
            let e;
            try {
                e = new Blob([`importScripts('${t}');`], {
                    type: "module"
                })
            } catch (i) {
                const a = new(window && window.BlobBuilder || window && window.WebKitBlobBuilder || window && window.MozBlobBuilder);
                a.append(`importScripts('${t}');`),
                e = a.getBlob("module")
            }
            const i = (window && window.URL || window && window.webkitURL).createObjectURL(e);
            return new Worker(i)
        } catch (t) {
            console.log("WorkerFallback", t)
        }
    }
    testSameOrigin(t) {
        const e = window.location,
        i = document.createElement("a");
        return i.href = t,
        i.hostname === e.hostname && i.port === e.port && i.protocol === e.protocol
    }
}